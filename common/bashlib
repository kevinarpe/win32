# To use this Bash shell script library, please import like this:
# COMMON_DIR_PATH='../common'
# source "$(dirname "$0")/$COMMON_DIR_PATH/bashlib"

# Exit immediately if a command exits with a non-zero status.
set -e
# Treat unset variables as an error when substituting.
set -u
# The return value of a pipeline is the status of
# the last command to exit with a non-zero status,
# or zero if no command exited with a non-zero status
set -o pipefail
# Print commands and their arguments as they are executed.
# set -x

__BASHLIB_TRUE=0
__BASHLIB_FALSE=1

__BASHLIB_GCC='x86_64-w64-mingw32-gcc'
__BASHLIB_STRIP='x86_64-w64-mingw32-strip'

__bashlib_is_linux()
{
    local uname
    uname="$(uname)"
    [ "Linux" = "$uname" ]
}

__bashlib_echo_exit_status()
{
    local exit_status

    local unused_output
    unused_output="$("$@" 2>&1)"

    exit_status=$?
    printf -- '%d' $exit_status
}

BASHLIB_IS_LINUX="$(__bashlib_echo_exit_status __bashlib_is_linux)"

bashlib_echo_cmd()
{
    echo
    echo '$' "$@"
}

bashlib_echo_and_run_cmd()
{
    bashlib_echo_cmd "$@"
    "$@"
}

bashlib_echo_and_run_strip_cmd()
{
    bashlib_echo_and_run_cmd \
        "$__BASHLIB_STRIP" "$@"
}

bashlib_echo_and_run_gcc_cmd()
{
    local arg_arr=()
    if [ $__BASHLIB_TRUE = $BASHLIB_IS_LINUX ]
    then
        # Normally, 'winegcc' defines this auto-magically.
        arg_arr+=(-D__WINE__)
    fi
    # Ref: https://stackoverflow.com/a/62488988/257299
    bashlib_echo_and_run_cmd \
        "$__BASHLIB_GCC" \
            "${arg_arr[@]}" \
            -g3 -ggdb3 \
            -Wall -Wextra -Wshadow \
            -Werror \
            -Wl,-subsystem,windows \
            -municode \
            "$@"
}

bashlib_echo_and_run_gcc_cmd_if_necessary()
{
    # Ex: 'error_exit.c'
    local input_file_path="$1"; shift

    # Ex: 'error_exit.o'
    local output_file_path="$1"; shift

    # Remaining args stored in "$@"

    # $ help test -> "FILE1 -nt FILE2: True if file1 is newer than file2 (according to modification date)."
    if [ "$input_file_path" -nt "$output_file_path" ]
    then
        bashlib_echo_and_run_gcc_cmd \
            -c -o "$output_file_path" "$input_file_path" "$@"
    else
        printf -- '\n%s: Not updated (do not re-compile)\n' "$input_file_path"
    fi
}

