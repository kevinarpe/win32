# To use this Bash shell script library, please import like this:
# COMMON_DIR_PATH='../common'
# source "$(dirname "$0")/$COMMON_DIR_PATH/bashlib"

# Exit immediately if a command exits with a non-zero status.
set -e
# Treat unset variables as an error when substituting.
set -u
# The return value of a pipeline is the status of
# the last command to exit with a non-zero status,
# or zero if no command exited with a non-zero status
set -o pipefail
# Print commands and their arguments as they are executed.
# set -x

BASHLIB_TRUE=0
BASHLIB_FALSE=1

BASHLIB_ARG_HELP='-h'
BASHLIB_ARG_HELP2='--help'
BASHLIB_ARG_CLEAN='--clean'
BASHLIB_ARG_RELEASE='--release'
BASHLIB_ARG_COMMON='--common'

__BASHLIB_GCC='x86_64-w64-mingw32-gcc'
__BASHLIB_STRIP='x86_64-w64-mingw32-strip'

__bashlib_is_linux()
{
    local uname
    uname="$(uname)"
    [ "Linux" = "$uname" ]
}

__bashlib_echo_exit_status()
{
    local exit_status

    local unused_output
    unused_output="$("$@" 2>&1)"

    exit_status=$?
    printf -- '%d' $exit_status
}

BASHLIB_IS_LINUX="$(__bashlib_echo_exit_status __bashlib_is_linux)"

bashlib_logf()
{
    # Ex: '2022-03-13 21:57:16.452 +08:00'
    local timestamp="$(date '+%Y-%m-%d %H:%M:%S.%3N %:z')"

    printf -- '\n%s: %s: ' "$timestamp" "$0"
    printf -- "$@"
    printf -- '\n'
}

bashlib_log_cmd()
{
    bashlib_logf '$ %s' "$*"
}

bashlib_log_and_run_cmd()
{
    bashlib_log_cmd "$@"
    "$@"
}

bashlib_log_and_run_strip_cmd()
{
    bashlib_log_and_run_cmd \
        "$__BASHLIB_STRIP" "$@"
}

bashlib_log_and_run_gcc_cmd()
{
    # Ex: $BASHLIB_TRUE or $BASHLIB_FALSE
    local is_release="$1" ; shift

    if [ $BASHLIB_TRUE != $is_release ] && [ $BASHLIB_FALSE != $is_release ]
    then
        bashlib_logf "Internal error: bashlib_log_and_run_gcc_cmd(): is_release has value [%s] but must be %d or %d" \
                     "$is_release" $BASHLIB_TRUE $BASHLIB_FALSE
        exit 1
    fi

    local arg_arr=()
    if [ $BASHLIB_TRUE = $BASHLIB_IS_LINUX ]
    then
        # Normally, 'winegcc' defines this auto-magically.
        arg_arr+=(-D__WINE__)
    fi

    if [ $BASHLIB_TRUE = $is_release ]
    then
        # Max optimization
        arg_arr+=(-O3 -DNDEBUG)
    else
        # Optimization disabled and max debug into
        arg_arr+=(-O0 -g3 -ggdb3)
    fi

    # Ref: https://stackoverflow.com/a/62488988/257299
    bashlib_log_and_run_cmd \
        "$__BASHLIB_GCC" \
            "${arg_arr[@]}" \
            -Wall -Wextra -Wshadow \
            -Werror \
            -Wl,-subsystem,windows \
            -municode \
            "$@"
}

bashlib_if_inputs_newer_than_output()
{
    local output_file_path="$1" ; shift
    # Remaining args: input_file_path: "$@"
    while [ 0 != $# ]
    do
        local input_file_path="$1" ; shift
        if [ -f "$input_file_path" ] \
        && [ "$input_file_path" -nt "$output_file_path" ] 
        then
            return $BASHLIB_TRUE
        fi
    done
    return $BASHLIB_FALSE
}

bashlib_log_and_run_gcc_cmd_if_necessary()
{
    # Ex: $BASHLIB_TRUE or $BASHLIB_FALSE
    local is_release="$1" ; shift

    # Ex: 'error_exit.c'
    local input_file_path="$1"; shift

    # Ex: 'error_exit.o'
    local output_file_path="$1"; shift

    # Remaining args stored in "$@"

    # $ help test -> "FILE1 -nt FILE2: True if file1 is newer than file2 (according to modification date)."
    if [ "$input_file_path" -nt "$output_file_path" ]
    then
        bashlib_log_and_run_gcc_cmd \
            "$is_release" -c -o "$output_file_path" "$input_file_path" "$@"
    else
        bashlib_logf '%s: Input file not updated: Do not re-compile' "$input_file_path"
    fi
}

